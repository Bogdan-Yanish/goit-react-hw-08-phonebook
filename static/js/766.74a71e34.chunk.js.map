{"version":3,"file":"static/js/766.74a71e34.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/Container/Container.styled.js","components/Container/Container.js","components/Section/Section.styled.js","components/Section/Section.js","components/Contact/ContactItem/ContactItem.styled.js","components/Contact/ContactItem/ContactItem.js","components/Contact/ContactList/ContactList.styled.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js","components/Contact/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    gap:5px;\n    align-items:center;\n\n`\nexport const FormLabel = styled.label`\n    color:blue;\n    \n`\nexport const FormInput = styled.input`\n    display: flex;\n    margin: 5px auto;\n    font-size: large;\n    padding: 10px;\n    border-radius: 4px;\n    border: 1px solid #1976D2;\n\n    ::placeholder {\n        font-size: 12px;\n        color: grey;\n        font-weight: 500;\n        font-style: italic;\n\n    }\n`\nexport const Btn = styled.button`\n    margin: 5px;\n    background-color: #1976D2;\n    border: none;\n    border-radius: 10px;\n    font-size: 18px;\n    height: 40px;\n    min-width: 120px;\n    color: white;\n    cursor: pointer;\n    font-weight: 500;\n    padding: 10px;\n\n    &:hover {\n        background-color: #4290f5;\n    }\n\n\n`\n","import styled from \"styled-components\";\n\nexport const ContainerStyle = styled.div`\n    // max-width: 1200px;\n    width:100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: 15px;\n    padding-right: 15px;\n    padding-top: 100px;\n\n`","import PropTypes from 'prop-types';\nimport { ContainerStyle } from './Container.styled';\n\nexport const Container = ({ children }) => (\n  <ContainerStyle>{children}</ContainerStyle>\n);\n\nContainer.propTypes = { \n    children: PropTypes.node, \n};","import styled from \"styled-components\";\n\nexport const Title = styled.h2`\n    text-transform: uppercase;\n    margin-top:20px;\n    margin-bottom:20px;\n    text-align: center;\n    letter-spacing: 0.03em;    \n`\n\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Title } from \"./Section.styled\";\n\nexport const Section = ({ title, children }) => {\n    return (\n        <div>\n            <Title>{title}</Title>\n            {children}\n        </div>\n    );\n};\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n};","import styled from \"styled-components\";\n\nexport const ContactWrap = styled.div`\n    display:flex;\n    flex-direction: row-reverse;\n    align-items: center;\n`\nexport const ContactInfo = styled.span`\n    font-size: 16px;\n    font-weight: 500;\n    display: block;\n    max-width: 250px;\n    margin-left: 5px;\n    margin-right:15px;\n    text-align: left;\n`\nexport const DelBtn = styled.button`\n    font-size: 16px;\n    font-weight: 500;\n    padding: 5px;\n    border-radius: 10px;\n    background-color:#1976D2;\n    color:white;\n    cursor:pointer;\n    border:none;   \n`","import propTypes from 'prop-types';\nimport {ContactWrap, ContactInfo, DelBtn} from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n    const dispatch = useDispatch();\n    return (\n        <ContactWrap>\n            <ContactInfo>\n                {name}: {number}\n            </ContactInfo>\n                <DelBtn\n                type=\"button\"\n                onClick={() => dispatch(deleteContact(id))}\n                >\n                    Delete\n                </DelBtn>\n        </ContactWrap>\n    )\n}\n\nContactItem.propTypes = {\n    id:propTypes.string.isRequired,\n    name:propTypes.string.isRequired,\n    number:propTypes.string.isRequired\n}","import styled from \"styled-components\";\n\nexport const ContactsList = styled.ul`\n    width: 100%;\n    margin: 10px 0 -8px;\n    padding: 10px;\n`\n\nexport const ContactListItem = styled.li`\n    border: 1px solid #1976D2;\n    border-radius: 10px;\n    align-items: center;\n    justify-content: space-between;\n    display: flex;\n    margin-bottom: 8px;\n    padding: 8px;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 2px 4px 0px inset;\n`","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n      return !contacts\n        ? []\n        : contacts.filter(contact =>\n            contact.name.toLowerCase().includes(filter.toLowerCase())\n          );\n    }\n  );\n","import { ContactItem } from \"../ContactItem/ContactItem\";\nimport {ContactListItem, ContactsList} from './ContactList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from \"redux/contacts/selectors\";\n\nexport const ContactList = () => {\n    \nconst visibleContacts = useSelector(selectVisibleContacts);\n\n    // const contactsData = useSelector(selectContacts);\n    // const filterData = useSelector(selectFilter);    \n    // const visibleContacts = () => {\n    //     return contactsData.filter(contact =>\n    //         contact?.name\n    //         .toLowerCase()\n    //         .includes(filterData)\n    //     );\n    // };\n    \n    return (\n        <ContactsList>\n            {visibleContacts.map( ({name, number, id}) => (\n                <ContactListItem key={id}>\n                    <ContactItem \n                        name={name}\n                        number={number}\n                        id={id}\n                    />\n                </ContactListItem>\n            ))}\n        </ContactsList>\n    );\n}\n\n\n\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Form, FormInput, FormLabel, Btn } from './ContactForm.styled';\n\nexport const ContactForm = () => {\n    const contactsData = useSelector(selectContacts);\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const handleChangeForm = event => {\n        const {name, value} = event.currentTarget;\n        switch (name) {\n            case 'name':\n                setName(value);                \n                break;\n            case 'number':\n                setNumber(value);\n                break;\n            default:\n                return;\n        }\n    }\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        \n        if (contactsData.findIndex(contact => name === contact.name) !== -1) {\n            alert(`${name} is already in contacts.`)\n            setName('');\n        } else {\n            dispatch(addContact({ name, number }));\n            resetForm();\n        }\n    };\n\n    const resetForm = () => {\n        setName('');\n        setNumber('');\n    }\n\n    return (\n            <Form onSubmit={handleSubmit}>\n                <FormLabel>Name</FormLabel>\n                <FormInput\n                    value={name}\n                    onChange={handleChangeForm}\n                    name=\"name\"\n                    type=\"text\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n                <FormLabel>Number</FormLabel>\n                <FormInput\n                    value={number}\n                    onChange={handleChangeForm}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n                <Btn type=\"submit\">Add Contact</Btn>\n            </Form>\n            \n        \n    )\n}\n\n\n\n","import styled from \"styled-components\";\n\nexport const FilterLabel = styled.label`\n    display:block;\n    color:blue;\n    text-align:center;\n`\nexport const FilterInput = styled.input`\n    display: flex;\n    margin: 5px auto;\n    font-size: large;\n    padding: 10px;\n    border-radius: 4px;\n    border: 1px solid #1976D2;\n`","import { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filtersSlice';\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n    \n    return (\n    <div>\n        <FilterLabel>Find contacts by Name </FilterLabel>\n    <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={event => dispatch(filterContacts(event.target.value))}\n    />\n  </div>\n);\n}\n\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/Contact/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectContacts, selectError } from 'redux/contacts/selectors';\nimport { Container } from 'components/Container/Container';\nimport { Section } from 'components/Section/Section';\nimport { LoaderSpinner } from 'components/Loader/loader';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <title>My Contacts</title>\n      <Container>\n        <Section title=\"Phonebook\">\n          {isLoading && !error && <LoaderSpinner />}\n          <ContactForm/>\n          \n        </Section>\n\n        {!!contacts.length && (\n          <Section title=\"My Contacts\">\n            <Filter/>\n            {/* <TaskEditor /> */}\n            <ContactList />\n          </Section>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default Contacts;"],"names":["Form","styled","FormLabel","FormInput","Btn","ContainerStyle","Container","children","Title","Section","title","ContactWrap","ContactInfo","DelBtn","ContactItem","id","name","number","dispatch","useDispatch","type","onClick","deleteContact","ContactsList","ContactListItem","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","contact","toLowerCase","includes","ContactList","visibleContacts","useSelector","ContactForm","contactsData","useState","setName","setNumber","handleChangeForm","event","currentTarget","resetForm","onSubmit","preventDefault","alert","addContact","onChange","pattern","required","FilterLabel","FilterInput","Filter","filterContacts","target","useEffect","fetchContacts"],"sourceRoot":""}